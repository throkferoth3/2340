healthVariesBasedOnDifficulty(): This unit test checks to make sure that the health of the player varies depending on the difficulty. If it does not get the correct cost,
                                 the test returns an assertion error. This is for milestone 1.

public void invalidCoordinateTowerPlacement(): This unit test tests to see if a tower can be placed on a invalid coordinate. Towers should not be able to be placed on a Y coordinate
                                               of <= 30. This would put them on top of the UI. This is for milestone 2.

testNegativeCost(): This unit test tests the case where the cost in ShopEntry is set to a negative number. The test checks to see if an exception is thrown when a trying to
                    call the setCost() method with the array parameter having a negative number in it. This is for milestone 2.

checkTowerColors(): This unit test checks that the three different types of towers are all the correct colors upon instantiation. It does this by creating a new object of each
                    of the three towers and utilizing the assertEquals() method to confirm that their colors are the intended ones. This is for milestone 2.

checkInsufficientFunds(): This unit test checks that the player has enough money to buy the towers. It does this by setting the players balance to 0 and checking if an error is 
		    fired after attempting to make a purchase. This is for milestone 2.

CheckTowerIndicator(): This unit test checks if the tower has the appropriate indicatores (0, 1, 2) respectively. It does this buy creating a tower and checking if it has the 
		    appropriate indicator that it was assigned. This is for milestone 2.
