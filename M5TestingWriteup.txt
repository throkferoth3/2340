- checkAttackersEmpty(): This unit test checks to see that for a newly created Enemy object, its attackers list is
  initially empty. Additionally, by doing this, the test also verifies that the list is not initially null. This test
  is relevant because it covers the time period when an enemy has just been created and has yet to be attacked.

- testAddAttackers(): This unit test verifies that the addAttacker() method is working properly. In other words, it
  is making sure that we are able to add towers to the attackers list when an enemy is attacked. THis test is relevant
  because it verifies an extremely important functionality involved in the combat stages of the game.
  
- testUpdateHealth(): This test verifies that the enemies health updates on the indicator. This is done by asserting that the 
  assumed output is equal to the actual output of updateHealth(). This test is relevant because it verifies that the enemies
  health is indeed getting updated by this method, thus allowing us to make their health dynamic. 
  
- testEnemyHealthIndicator(): This unit test verifies that the enemies have a visible health indicator. This is done by asserting
  that the Text object is not null indicating that the health indicator is present. This is relevant because it verifies that 
  we have a health indicator that can be viewed by the player. 

- testCreateInitText(): This test verifies that the initial health text of the enemies is correct. The various enemies have
  differing healths. This method creates the text that will later be displayed to the player on each enemy. It compares
  the expected string of text with the actual text to ensure that it matches.

- testCreateDisplay(): This test checks to see if the enemy display consists of a circle with text stacked on top of it.
  It creates the display with the corresponding method and checks that the child at index 0 is a Circle and the child at
  index 1 is text.


- testInRange(): This test verifies that the range calculation for the redTower is working correctly by creating a tower and checking that a value that is out of range is correcly labelled false and a value in range is labelled true.

- testClearEnemies(): This test verifies that the enemy datastructure is properly emptied upon restarting the game. It does this by first adding one of each enemy type and checking the size. It then calls clearEnemies() and makes sure the size is now 0. 